#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TikTok Bot - C·∫£i thi·ªán hi·ªáu qu·∫£ skip
"""

import os
import time
import logging
import cv2
import numpy as np
import subprocess
import json
from typing import List, Optional
import random

def safe_import():
    """Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt"""
    modules = {}
    
    try:
        import pyautogui
        pyautogui.FAILSAFE = False
        pyautogui.PAUSE = 0.05  # Minimal pause for smooth operation
        # Optimize for macro recording
        pyautogui.MINIMUM_DURATION = 0.1
        pyautogui.MINIMUM_SLEEP = 0.05
        modules['pyautogui'] = pyautogui
        print("‚úÖ pyautogui: OK (optimized for smooth operation)")
    except ImportError:
        print("‚ùå pyautogui: MISSING")
        modules['pyautogui'] = None
    
    try:
        import pygetwindow as gw
        modules['pygetwindow'] = gw
        print("‚úÖ pygetwindow: OK")
    except ImportError:
        print("‚ùå pygetwindow: MISSING")
        modules['pygetwindow'] = None
    
    try:
        import pytesseract
        import platform
        if platform.system() == "Windows":
            paths = [
                r'C:\Program Files\Tesseract-OCR\tesseract.exe',
                r'C:\Program Files (x86)\Tesseract-OCR\tesseract.exe'
            ]
            for path in paths:
                if os.path.exists(path):
                    pytesseract.pytesseract.tesseract_cmd = path
                    break
        
        pytesseract.get_tesseract_version()
        modules['pytesseract'] = pytesseract
        print("‚úÖ pytesseract: OK")
    except:
        print("‚ùå pytesseract: ERROR")
        modules['pytesseract'] = None
    
    return modules

class ImprovedTikTokBot:
    def __init__(self):
        print("üöÄ Kh·ªüi t·∫°o TikTok Bot Improved...")
        
        self.modules = safe_import()
        
        # C·∫•u h√¨nh skip methods v·ªõi ƒë·ªô ∆∞u ti√™n - optimized order
        self.skip_methods = [
            {
                "name": "enhanced_keyboard", 
                "priority": 1, 
                "enabled": True,
                "success_rate": 0.0,
                "attempts": 0,
                "successes": 0
            },
            {
                "name": "mouse_swipe_up", 
                "priority": 2, 
                "enabled": True,
                "success_rate": 0.0,
                "attempts": 0,
                "successes": 0
            },
            {
                "name": "combination_method", 
                "priority": 3, 
                "enabled": True,
                "success_rate": 0.0,
                "attempts": 0,
                "successes": 0
            },
            {
                "name": "mouse_click_next", 
                "priority": 4, 
                "enabled": True,
                "success_rate": 0.0,
                "attempts": 0,
                "successes": 0
            },
            {
                "name": "external_macro", 
                "priority": 5, 
                "enabled": True,  # Enabled for advanced automation
                "success_rate": 0.0,
                "attempts": 0,
                "successes": 0
            }
        ]
        
        # C·∫•u h√¨nh - Optimized for smoother operation
        self.config = {
            "max_retries": 3,           # Reduced for faster response
            "retry_delay": 0.1,         # Faster retry for smoother operation
            "success_delay": 0.8,       # Reduced delay after success
            "focus_attempts": 2,        # Fewer focus attempts
            "verification_enabled": True,
            "adaptive_timing": True,
            "smooth_mode": True,        # New flag for macro compatibility
            "mouse_speed": 0.2          # Fast mouse movements for macros
        }
        
        # Keywords
        self.live_keywords = [
            "LIVE", "Live", "live", 
            "TR·ª∞C TI·∫æP", "Tr·ª±c ti·∫øp", "tr·ª±c ti·∫øp",
            "ƒêANG LIVE", "ƒêang live",
            "PH√ÅT TR·ª∞C TI·∫æP", "Ph√°t tr·ª±c ti·∫øp"
        ]
        
        # Th·ªëng k√™
        self.stats = {
            "total_detections": 0,
            "total_successes": 0,
            "session_start": time.time()
        }
        
        print("‚úÖ Bot kh·ªüi t·∫°o th√†nh c√¥ng!")
    
    def find_tiktok_windows(self):
        """T√¨m c·ª≠a s·ªï TikTok v·ªõi filter t·ªët h∆°n"""
        if not self.modules['pygetwindow']:
            return []
        
        try:
            gw = self.modules['pygetwindow']
            all_windows = gw.getAllWindows()
            
            tiktok_windows = []
            for window in all_windows:
                title = window.title.lower()
                # M·ªü r·ªông criteria t√¨m ki·∫øm
                if any(keyword in title for keyword in ['tiktok', 'tik tok']) and \
                   window.width > 300 and window.height > 400 and \
                   window.visible:
                    tiktok_windows.append(window)
                    print(f"üéØ TikTok: {window.title} ({window.width}x{window.height})")
            
            return tiktok_windows
            
        except Exception as e:
            print(f"‚ùå L·ªói t√¨m c·ª≠a s·ªï: {e}")
            return []
    
    def ensure_window_focus(self, window, attempts=3):
        """ƒê·∫£m b·∫£o window ƒë∆∞·ª£c focus ƒë√∫ng c√°ch - optimized for smooth operation"""
        for attempt in range(attempts):
            try:
                # Quick focus sequence for macro compatibility
                window.restore()  # Restore if minimized
                window.activate()
                
                # Minimal delay for smooth operation
                if self.config.get("smooth_mode", False):
                    time.sleep(0.05)
                else:
                    time.sleep(0.2)
                
                # Quick center click for focus
                if self.modules['pyautogui']:
                    center_x = window.left + window.width // 2
                    center_y = window.top + window.height // 2
                    self.modules['pyautogui'].click(center_x, center_y, duration=0.1)
                    time.sleep(0.05)
                
                # Quick verification
                gw = self.modules['pygetwindow']
                try:
                    active_window = gw.getActiveWindow()
                    if active_window and active_window.title == window.title:
                        if attempt == 0:  # Only print on first successful attempt
                            print(f"‚úÖ Window focused quickly")
                        return True
                except:
                    pass  # Continue to retry if verification fails
                
                if attempt < attempts - 1:  # Don't wait on last attempt
                    time.sleep(0.1)
                
            except Exception as e:
                if attempt == attempts - 1:  # Only log error on final attempt
                    print(f"‚ùå Focus error: {e}")
        
        return False  # Failed after all attempts
    
    def capture_screen(self, window):
        """Ch·ª•p m√†n h√¨nh v·ªõi error handling t·ªët h∆°n"""
        if not self.modules['pyautogui']:
            return None
        
        try:
            # Ensure focus first
            if not self.ensure_window_focus(window):
                return None
            
            pyautogui = self.modules['pyautogui']
            
            # Capture v·ªõi bounds checking
            left = max(0, window.left)
            top = max(0, window.top)
            width = min(window.width, 1920)  # Limit max width
            height = min(window.height, 1080)  # Limit max height
            
            screenshot = pyautogui.screenshot(region=(left, top, width, height))
            return cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
            
        except Exception as e:
            print(f"‚ùå L·ªói ch·ª•p m√†n h√¨nh: {e}")
            return None
    
    def detect_live_text(self, image):
        """Ph√°t hi·ªán LIVE v·ªõi OCR c·∫£i thi·ªán"""
        if not self.modules['pytesseract']:
            return False, ""
        
        try:
            pytesseract = self.modules['pytesseract']
            
            # Preprocess image cho OCR t·ªët h∆°n
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            
            # Enhance contrast
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
            enhanced = clahe.apply(gray)
            
            # Multiple OCR attempts v·ªõi configs kh√°c nhau
            configs = [
                '--oem 3 --psm 6 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz√Ä√Å√Ç√É√à√â√ä√å√ç√í√ì√î√ï√ô√ö√ù√†√°√¢√£√®√©√™√¨√≠√≤√≥√¥√µ√π√∫√ΩƒÇƒÉƒêƒëƒ®ƒ©≈®≈©∆†∆°∆Ø∆∞·∫†-·ªπ ',
                '--oem 3 --psm 8',
                '--oem 3 --psm 7'
            ]
            
            all_text = ""
            for config in configs:
                try:
                    text = pytesseract.image_to_string(enhanced, config=config, lang='vie+eng')
                    all_text += " " + text
                except:
                    continue
            
            # Check keywords
            for keyword in self.live_keywords:
                if keyword in all_text:
                    return True, keyword
            
            return False, ""
            
        except Exception as e:
            return False, ""
    
    def verify_skip_success(self, window, pre_screenshot):
        """Verify xem skip c√≥ th√†nh c√¥ng kh√¥ng - optimized for speed"""
        if not self.config["verification_enabled"]:
            return True
        
        try:
            # Faster verification timing
            wait_time = 0.6 if self.config.get("smooth_mode", False) else 1.0
            time.sleep(wait_time)
            
            post_screenshot = self.capture_screen(window)
            
            if post_screenshot is None:
                return False
            
            # Quick comparison for faster response
            if pre_screenshot is not None:
                # Use smaller regions for faster comparison
                h, w = pre_screenshot.shape[:2]
                # Focus on center area where most changes occur
                y1, y2 = h//4, 3*h//4
                x1, x2 = w//4, 3*w//4
                
                pre_region = cv2.cvtColor(pre_screenshot[y1:y2, x1:x2], cv2.COLOR_BGR2GRAY)
                post_region = cv2.cvtColor(post_screenshot[y1:y2, x1:x2], cv2.COLOR_BGR2GRAY)
                
                # Calculate difference in focused region
                diff = cv2.absdiff(pre_region, post_region)
                diff_percentage = (cv2.countNonZero(diff) / (diff.shape[0] * diff.shape[1])) * 100
                
                # Lower threshold for faster detection
                if diff_percentage > 15:
                    print(f"‚úÖ Skip verified: {diff_percentage:.1f}% change")
                    return True
                else:
                    print(f"‚ùå Skip failed: only {diff_percentage:.1f}% change")
                    return False
            
            # Fallback: quick live text check
            is_live, _ = self.detect_live_text(post_screenshot)
            success = not is_live
            
            if success:
                print("‚úÖ Skip verified: no LIVE detected")
            else:
                print("‚ùå Skip failed: still LIVE")
            
            return success
            
        except Exception as e:
            print(f"‚ùå Verification error: {e}")
            return False
    
    # Skip Methods
    def skip_method_enhanced_keyboard(self, window, screenshot):
        """Enhanced keyboard method optimized for macro recording"""
        if not self.modules['pyautogui']:
            return False
        
        try:
            pyautogui = self.modules['pyautogui']
            
            # Ensure focus with minimal attempts
            if not self.ensure_window_focus(window, attempts=1):
                return False
            
            # Simplified keyboard methods for macro compatibility
            keyboard_actions = [
                'down',      # Primary navigation key
                'space',     # Alternative skip key
                'right',     # Horizontal navigation
                'pagedown'   # Page navigation
            ]
            
            for i, key in enumerate(keyboard_actions):
                print(f"   üîÑ Keyboard: {key}")
                
                # Quick re-focus if needed
                if i > 0:
                    window.activate()
                    time.sleep(0.02)
                
                # Execute key press - optimized for macros
                pyautogui.press(key)
                
                # Quick verification with shorter wait
                time.sleep(0.3)
                if self.verify_skip_success(window, screenshot):
                    print(f"   ‚úÖ Keyboard {key} successful")
                    return True
                
                print(f"   ‚ùå Keyboard {key} failed")
                
                # Minimal delay between attempts
                if i < len(keyboard_actions) - 1:
                    time.sleep(0.1)
            
            return False
            
        except Exception as e:
            print(f"‚ùå Enhanced keyboard error: {e}")
            return False
    
    def skip_method_mouse_swipe_up(self, window, screenshot):
        """Mouse swipe up method optimized for macro recording"""
        if not self.modules['pyautogui']:
            return False
        
        try:
            pyautogui = self.modules['pyautogui']
            
            if not self.ensure_window_focus(window):
                return False
            
            # Calculate swipe coordinates
            center_x = window.left + window.width // 2
            center_y = window.top + window.height // 2
            
            # Optimized swipe patterns for macro compatibility
            swipe_patterns = [
                # Quick swipe - best for macros
                {
                    "start_y": center_y + 120,
                    "end_y": center_y - 120,
                    "duration": self.config.get("mouse_speed", 0.2)
                },
                # Medium swipe
                {
                    "start_y": center_y + 150,
                    "end_y": center_y - 150,
                    "duration": 0.25
                },
                # Strong swipe
                {
                    "start_y": center_y + 180,
                    "end_y": center_y - 180,
                    "duration": 0.3
                }
            ]
            
            for i, pattern in enumerate(swipe_patterns):
                print(f"   üîÑ Swipe pattern {i+1}")
                
                # Quick center click for focus
                pyautogui.click(center_x, center_y, duration=0.05)
                time.sleep(0.05)
                
                # Perform optimized swipe
                pyautogui.drag(
                    center_x, pattern["start_y"],
                    center_x, pattern["end_y"],
                    duration=pattern["duration"],
                    button='left'
                )
                
                # Quick verification
                time.sleep(0.5)
                if self.verify_skip_success(window, screenshot):
                    print(f"   ‚úÖ Swipe pattern {i+1} successful")
                    return True
                
                print(f"   ‚ùå Swipe pattern {i+1} failed")
                
                # Minimal delay between patterns
                if i < len(swipe_patterns) - 1:
                    time.sleep(0.15)
            
            return False
            
        except Exception as e:
            print(f"‚ùå Mouse swipe error: {e}")
            return False
    
    def skip_method_mouse_click_next(self, window, screenshot):
        """Click v√†o v·ªã tr√≠ n√∫t next (n·∫øu c√≥)"""
        if not self.modules['pyautogui']:
            return False
        
        try:
            pyautogui = self.modules['pyautogui']
            
            if not self.ensure_window_focus(window):
                return False
            
            # Possible next button locations (relative to window)
            click_positions = [
                # Right side (common for next buttons)
                (window.left + window.width - 50, window.top + window.height // 2),
                # Bottom right
                (window.left + window.width - 100, window.top + window.height - 100),
                # Center right
                (window.left + window.width - 30, window.top + window.height // 2),
                # Bottom center (swipe area)
                (window.left + window.width // 2, window.top + window.height - 50)
            ]
            
            for i, (x, y) in enumerate(click_positions):
                print(f"   üîÑ Click position {i+1}")
                
                # Click position
                pyautogui.click(x, y)
                time.sleep(0.3)
                
                # Verification
                if self.verify_skip_success(window, screenshot):
                    print(f"   ‚úÖ Click position {i+1} successful")
                    return True
                
                print(f"   ‚ùå Click position {i+1} failed")
                time.sleep(0.2)
            
            return False
            
        except Exception as e:
            print(f"‚ùå Mouse click error: {e}")
            return False
    
    def skip_method_combination_method(self, window, screenshot):
        """Combination method optimized for smooth operation"""
        print("   üîÑ Trying optimized combination method")
        
        try:
            if not self.modules['pyautogui']:
                return False
                
            pyautogui = self.modules['pyautogui']
            center_x = window.left + window.width // 2
            center_y = window.top + window.height // 2
            
            # Combination 1: Quick Click + Keyboard (macro-friendly)
            if self.ensure_window_focus(window):
                pyautogui.click(center_x, center_y, duration=0.05)
                time.sleep(0.05)
                pyautogui.press('down')
                time.sleep(0.4)
                
                if self.verify_skip_success(window, screenshot):
                    print("   ‚úÖ Quick combination successful")
                    return True
            
            # Combination 2: Double swipe (for stubborn content)
            pyautogui.drag(center_x, center_y + 80, center_x, center_y - 80, duration=0.15)
            time.sleep(0.05)
            pyautogui.drag(center_x, center_y + 120, center_x, center_y - 120, duration=0.2)
            time.sleep(0.5)
            
            if self.verify_skip_success(window, screenshot):
                print("   ‚úÖ Double swipe combination successful") 
                return True
            
            # Combination 3: Multi-key sequence
            keys = ['space', 'down', 'right']
            for key in keys:
                pyautogui.press(key)
                time.sleep(0.08)
            
            time.sleep(0.4)
            if self.verify_skip_success(window, screenshot):
                print("   ‚úÖ Multi-key combination successful")
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Combination method error: {e}")
            return False
    
    def skip_method_external_macro(self, window, screenshot):
        """External macro method for advanced automation"""
        print("   üîÑ Trying external macro method")
        
        try:
            # Method 1: Try to execute external macro script if available
            macro_scripts = [
                "tiktok_skip_macro.ahk",  # AutoHotkey script
                "tiktok_skip.py",         # Python macro script
                "skip_macro.exe"          # Compiled macro
            ]
            
            for script in macro_scripts:
                if os.path.exists(script):
                    print(f"   üìÑ Found macro script: {script}")
                    try:
                        if script.endswith('.ahk'):
                            # AutoHotkey script
                            result = subprocess.run(['autohotkey', script], 
                                                   timeout=3, capture_output=True)
                        elif script.endswith('.py'):
                            # Python script
                            result = subprocess.run(['python', script], 
                                                   timeout=3, capture_output=True)
                        elif script.endswith('.exe'):
                            # Executable
                            result = subprocess.run([script], 
                                                   timeout=3, capture_output=True)
                        
                        if result.returncode == 0:
                            print(f"   ‚úÖ External macro executed successfully")
                            time.sleep(0.5)
                            return self.verify_skip_success(window, screenshot)
                        
                    except subprocess.TimeoutExpired:
                        print(f"   ‚ö†Ô∏è Macro script timeout: {script}")
                    except Exception as e:
                        print(f"   ‚ùå Macro script error: {e}")
            
            # Method 2: Simulate advanced macro sequence
            if self.modules['pyautogui']:
                pyautogui = self.modules['pyautogui']
                
                # Advanced sequence: Click + Multiple keys + Swipe
                center_x = window.left + window.width // 2
                center_y = window.top + window.height // 2
                
                # Focus click
                pyautogui.click(center_x, center_y, duration=0.1)
                time.sleep(0.05)
                
                # Key sequence
                pyautogui.press('space')
                time.sleep(0.1)
                pyautogui.press('down')
                time.sleep(0.1)
                
                # Small swipe
                pyautogui.drag(center_x, center_y + 50, center_x, center_y - 50, duration=0.15)
                
                time.sleep(0.5)
                if self.verify_skip_success(window, screenshot):
                    print("   ‚úÖ Macro sequence successful")
                    return True
            
            print("   ‚ùå External macro method failed")
            return False
            
        except Exception as e:
            print(f"‚ùå External macro error: {e}")
            return False
    
    def update_method_stats(self, method, success):
        """Update statistics cho method"""
        method["attempts"] += 1
        if success:
            method["successes"] += 1
        
        # Calculate success rate
        if method["attempts"] > 0:
            method["success_rate"] = method["successes"] / method["attempts"]
    
    def get_best_methods(self):
        """Get methods sorted by success rate"""
        enabled_methods = [m for m in self.skip_methods if m["enabled"]]
        
        # Sort by success rate (descending), then by priority
        return sorted(enabled_methods, 
                     key=lambda x: (-x["success_rate"], x["priority"]))
    
    def skip_with_smart_selection(self, window):
        """Skip v·ªõi smart method selection"""
        self.stats["total_detections"] += 1
        
        # Capture screenshot for verification
        screenshot = self.capture_screen(window)
        if screenshot is None:
            return False
        
        # Get best methods
        methods = self.get_best_methods()
        
        if not methods:
            print("‚ùå Kh√¥ng c√≥ method n√†o ƒë∆∞·ª£c k√≠ch ho·∫°t")
            return False
        
        print(f"üéØ Th·ª≠ {len(methods)} methods theo th·ª© t·ª± hi·ªáu qu·∫£...")
        
        for attempt in range(self.config["max_retries"]):
            print(f"\nüîÑ L·∫ßn th·ª≠ {attempt + 1}/{self.config['max_retries']}")
            
            for method in methods:
                method_name = method["name"]
                success_rate = method["success_rate"] * 100
                
                print(f"‚ö° Method: {method_name} (success rate: {success_rate:.1f}%)")
                
                # Get method function
                method_func = getattr(self, f"skip_method_{method_name}", None)
                if not method_func:
                    continue
                
                # Execute method
                start_time = time.time()
                success = method_func(window, screenshot)
                execution_time = time.time() - start_time
                
                # Update stats
                self.update_method_stats(method, success)
                
                print(f"   ‚è±Ô∏è Execution time: {execution_time:.2f}s")
                
                if success:
                    self.stats["total_successes"] += 1
                    print(f"‚úÖ SKIP TH√ÄNH C√îNG b·∫±ng {method_name}!")
                    time.sleep(self.config["success_delay"])
                    return True
                else:
                    print(f"‚ùå {method_name} failed")
                
                # Optimized adaptive delay for smooth operation
                if self.config["adaptive_timing"]:
                    # Faster delays for better responsiveness
                    base_delay = self.config["retry_delay"]
                    success_factor = max(0.1, method["success_rate"])
                    delay = base_delay * (0.5 + (1 - success_factor) * 0.5)
                    time.sleep(min(delay, 0.5))  # Cap at 0.5s max
                else:
                    time.sleep(self.config["retry_delay"])
            
            # Delay between retry attempts
            if attempt < self.config["max_retries"] - 1:
                print(f"‚è≥ Ch·ªù tr∆∞·ªõc l·∫ßn th·ª≠ ti·∫øp theo...")
                time.sleep(0.5)
        
        print(f"‚ùå T·∫§T C·∫¢ METHODS ƒê·ªÄU TH·∫§T B·∫†I sau {self.config['max_retries']} l·∫ßn th·ª≠")
        return False
    
    def print_detailed_stats(self):
        """In th·ªëng k√™ chi ti·∫øt"""
        print("\n" + "="*60)
        print("üìä TH·ªêNG K√ä CHI TI·∫æT")
        print("="*60)
        
        # Overall stats
        runtime = time.time() - self.stats["session_start"]
        hours = int(runtime // 3600)
        minutes = int((runtime % 3600) // 60)
        
        print(f"‚è∞ Th·ªùi gian ch·∫°y: {hours}h {minutes}m")
        print(f"üéØ T·ªïng ph√°t hi·ªán LIVE: {self.stats['total_detections']}")
        print(f"‚úÖ Skip th√†nh c√¥ng: {self.stats['total_successes']}")
        
        if self.stats['total_detections'] > 0:
            overall_rate = (self.stats['total_successes'] / self.stats['total_detections']) * 100
            print(f"üìà T·ª∑ l·ªá th√†nh c√¥ng t·ªïng: {overall_rate:.1f}%")
        
        print(f"\nüìã CHI TI·∫æT THEO METHOD:")
        print("-" * 60)
        
        for method in sorted(self.skip_methods, key=lambda x: -x["success_rate"]):
            if method["attempts"] > 0:
                rate = method["success_rate"] * 100
                status = "üü¢" if method["enabled"] else "üî¥"
                print(f"{status} {method['name']:<20} | "
                      f"{method['successes']:>3}/{method['attempts']:<3} | "
                      f"{rate:>6.1f}% | "
                      f"Priority: {method['priority']}")
        
        print("="*60)
    
    def start_monitoring(self):
        """B·∫Øt ƒë·∫ßu gi√°m s√°t v·ªõi improved logic"""
        print("üîç B·∫Øt ƒë·∫ßu gi√°m s√°t TikTok v·ªõi Smart Skip Selection...")
        print("‚ö†Ô∏è Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng")
        
        cycle = 0
        consecutive_failures = 0
        
        try:
            while True:
                cycle += 1
                print(f"\n{'='*20} Chu k·ª≥ #{cycle} {'='*20}")
                
                windows = self.find_tiktok_windows()
                
                if not windows:
                    print("‚è≥ Kh√¥ng t√¨m th·∫•y TikTok...")
                    consecutive_failures += 1
                    
                    # Adaptive delay based on failures
                    delay = min(3 + consecutive_failures, 10)
                    print(f"‚è≥ Ch·ªù {delay}s...")
                    time.sleep(delay)
                    continue
                
                consecutive_failures = 0  # Reset counter
                
                for i, window in enumerate(windows):
                    print(f"\nüîç Window {i+1}/{len(windows)}: {window.title}")
                    
                    screenshot = self.capture_screen(window)
                    if screenshot is None:
                        print("‚ö†Ô∏è Kh√¥ng th·ªÉ ch·ª•p m√†n h√¨nh")
                        continue
                    
                    is_live, keyword = self.detect_live_text(screenshot)
                    
                    if is_live:
                        print(f"üî¥ PH√ÅT HI·ªÜN LIVE! Keyword: '{keyword}'")
                        success = self.skip_with_smart_selection(window)
                        
                        if success:
                            print("üéâ Skip th√†nh c√¥ng!")
                        else:
                            print("üòû Skip th·∫•t b·∫°i!")
                    else:
                        print("‚úÖ Kh√¥ng ph·∫£i live")
                
                print("‚è≥ Ch·ªù 2 gi√¢y tr∆∞·ªõc chu k·ª≥ ti·∫øp theo... (optimized)")
                time.sleep(2)  # Reduced from 3 seconds for faster response
                
        except KeyboardInterrupt:
            print("\nüõë D·ª´ng bot theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
            self.print_detailed_stats()

def main():
    """Main function"""
    print("=" * 70)
    print("ü§ñ TikTok Bot - IMPROVED VERSION")
    print("üìà Smart Skip Selection v·ªõi Success Rate Tracking")
    print("=" * 70)
    
    try:
        bot = ImprovedTikTokBot()
        
        while True:
            print("\nüéØ MENU:")
            print("1. B·∫Øt ƒë·∫ßu gi√°m s√°t")
            print("2. Xem th·ªëng k√™ chi ti·∫øt")
            print("3. C·∫•u h√¨nh")
            print("4. Tho√°t")
            
            choice = input("Ch·ªçn (1-4): ").strip()
            
            if choice == "1":
                bot.start_monitoring()
            elif choice == "2":
                bot.print_detailed_stats()
            elif choice == "3":
                print("üîß C·∫•u h√¨nh s·∫Ω ƒë∆∞·ª£c th√™m trong phi√™n b·∫£n ti·∫øp theo")
            elif choice == "4":
                print("üëã T·∫°m bi·ªát!")
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
    
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main()
